[{"pageContent":"# Choosing index type and size\n\n# URL: [https://docs.pinecone.io/docs/choosing-index-type-and-size](https://docs.pinecone.io/docs/choosing-index-type-and-size)\n\n# Choosing index type and size\n\nWhen creating an index in Pinecone, you will need to choose the index type and size that best suits your data and use case. The index type and size determine how your data is stored and indexed, which can affect the speed and accuracy of similarity searches.\n\n## Index types\n\nPinecone supports two types of indexes: `hnsw` and `lsh`. Both index types support fast similarity search on high-dimensional vectors, but they differ in their performance characteristics and trade-offs.\n\n### HNSW\n\nThe `hnsw` index type uses the Hierarchical Navigable Small World (HNSW) algorithm to perform similarity search. HNSW is a graph-based algorithm that builds a hierarchical network of data points, where each point is connected to a small number of other points in the network. The HNSW algorithm is designed to balance search speed and accuracy, and can provide fast results even for large datasets.\n\n### LSH\n\nThe `lsh` index type uses Locality-Sensitive Hashing (LSH) to perform similarity search. LSH is a probabilistic algorithm that hashes data points to a set of buckets based on their similarity. LSH is designed to be efficient for high-dimensional data, but may not provide the same level of accuracy as HNSW for some datasets.\n\n## Index size\n\nThe size of your index determines how many vectors it can store and how much memory it will require. When choosing the size of your index, you will need to consider the size of your dataset, the dimensionality of your vectors, and the resources available on your system.\n\n### Number of vectors\n\nThe number of vectors your index can store depends on the size of each vector and the amount of memory available on your system. For example, if you have 1 GB of memory available and each vector is 100 bytes, you could store approximately 10 million vectors in your index.\n\n### Dimensionality\n\nThe dimensionality of your vectors also affects the size of your index. As the dimensionality of your vectors increases, the number of required memory grows exponentially. For example, if you double the dimensionality of your vectors, you will need to quadruple the amount of memory required to store your index.\n\n## Choosing the right index\n\nWhen choosing the index type and size for your dataset, it's important to consider your specific use case and requirements. Here are some factors to consider:\n\n- **Accuracy**: If accuracy is your primary concern, the HNSW index type may be the best choice. HNSW is designed to provide high accuracy even for large datasets.\n- **Speed**: If speed is your primary concern, the LSH index type may be the best choice. LSH can provide fast results even for very high-dimensional data.\n- **Dataset size**: If you have a very large dataset, the HNSW index type may be more efficient. HNSW can handle very large datasets without sacrificing accuracy.\n- **Dimensionality**: If your vectors have a high dimensionality, the LSH index type may be more efficient. LSH is designed to be efficient for high-dimensional data.\n\n## Next steps\n\nTo learn more about how to create an index in Pinecone, check out the [documentation](https://docs.pinecone.io/docs/quickstart#step-2-set-up-your-pinecone-instance). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Choosing index type and size 44eee9971da34e1095a2e6c00340f211.md"}},{"pageContent":"# Collections\n\n# URL: [https://docs.pinecone.io/docs/collections](https://docs.pinecone.io/docs/collections)\n\n# Collections\n\nIn Pinecone, a collection is a group of indexes that share the same schema and metadata. Collections are useful for organizing and managing your indexes, especially if you have a large number of indexes.\n\n## Creating a collection\n\nTo create a collection, simply provide a name and optional metadata when you create your first index in the collection. For example, you could create a collection called `my_collection` with metadata `{\"description\": \"My collection of image indexes\"}`:\n\n```\nPOST /indexes\n{\n    \"name\": \"my_index\",\n    \"dimension\": 128,\n    \"metadata\": {\"description\": \"My first index in my_collection\"},\n    \"collection\": \"my_collection\"\n}\n\n```\n\nThis will create a new index called `my_index` in the `my_collection` collection with the specified metadata.\n\n## Listing collections and indexes\n\nTo list your collections and indexes, you can use the `/indexes` endpoint with the `collection` query parameter. For example, to list all indexes in the `my_collection` collection:\n\n```\nGET /indexes?collection=my_collection\n\n```\n\nThis will return a list of all indexes in the `my_collection` collection.\n\n## Updating collections\n\nYou can update the metadata for a collection using the `/collections` endpoint. For example, to update the description for the `my_collection` collection:\n\n```\nPUT /collections/my_collection\n{\n    \"metadata\": {\"description\": \"My updated collection of image indexes\"}\n}\n\n```\n\nThis will update the metadata for the `my_collection` collection.\n\n## Deleting collections\n\nTo delete a collection, you must first delete all indexes in the collection. You can do this by listing the indexes in the collection and deleting them one by one using the `/indexes/{index_name}` endpoint. Once all indexes in the collection have been deleted, you can delete the collection using the `/collections/{collection_name}` endpoint. For example, to delete the `my_collection` collection:\n\n```\nDELETE /collections/my_collection\n\n```\n\n## Next steps\n\nTo learn more about using collections in Pinecone, check out the [documentation](https://docs.pinecone.io/docs/collections). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Collections f6cce3ddcdaf44e7989fe72273a5ce91.md"}},{"pageContent":"# Examples\n\n# URL: [https://docs.pinecone.io/docs/examples](https://docs.pinecone.io/docs/examples)\n\n# Examples\n\nPinecone provides a range of examples to help you get started with building similarity search applications using Pinecone. These examples cover a range of use cases and programming languages.\n\n## Python examples\n\n### Quickstart\n\nThe [quickstart example](https://github.com/pinecone-io/pinecone-python-example-quickstart) provides a Python script that demonstrates how to set up a Pinecone index and perform a similarity search using the Pinecone Python client.\n\n### Image search\n\nThe [image search example](https://github.com/pinecone-io/pinecone-python-example-image-search) provides a Python script that demonstrates how to use Pinecone for image search.\n\n## Node.js examples\n\n### Quickstart\n\nThe [quickstart example](https://github.com/pinecone-io/pinecone-node-example-quickstart) provides a Node.js script that demonstrates how to set up a Pinecone index and perform a similarity search using the Pinecone Node.js client.\n\n### Image search\n\nThe [image search example](https://github.com/pinecone-io/pinecone-node-example-image-search) provides a Node.js script that demonstrates how to use Pinecone for image search.\n\n## Go examples\n\n### Quickstart\n\nThe [quickstart example](https://github.com/pinecone-io/pinecone-go-example-quickstart) provides a Go script that demonstrates how to set up a Pinecone index and perform a similarity search using the Pinecone Go client.\n\n## Java examples\n\n### Quickstart\n\nThe [quickstart example](https://github.com/pinecone-io/pinecone-java-example-quickstart) provides a Java script that demonstrates how to set up a Pinecone index and perform a similarity search using the Pinecone Java client.\n\n## Ruby examples\n\n### Quickstart\n\nThe [quickstart example](https://github.com/pinecone-io/pinecone-ruby-example-quickstart) provides a Ruby script that demonstrates how to set up a Pinecone index and perform a similarity search using the Pinecone Ruby client.\n\n## Next steps\n\nTo learn more about using Pinecone, check out the [documentation](https://docs.pinecone.io/docs). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Examples 37128bbffa05471cb8ed6e5dada694e3.md"}},{"pageContent":"# Indexes\n\n# URL: [https://docs.pinecone.io/docs/indexes](https://docs.pinecone.io/docs/indexes)\n\n# Indexes\n\nIn Pinecone, an index is a data structure that stores high-dimensional vectors and allows for fast similarity search. Each index has a name, a dimensionality, and an index type, and can be associated with metadata for organization and management.\n\n## Creating an index\n\nTo create an index in Pinecone, you can use the `/indexes` endpoint with the following parameters:\n\n- `name`: The name of the index.\n- `dimension`: The dimensionality of the vectors in the index.\n- `index_type`: The type of the index (`hnsw` or `lsh`).\n- `metadata` (optional): A dictionary of metadata to associate with the index.\n\nFor example, to create an index called `my_index` with dimensionality 128 and HNSW index type:\n\n```\nPOST /indexes\n{\n    \"name\": \"my_index\",\n    \"dimension\": 128,\n    \"index_type\": \"hnsw\"\n}\n\n```\n\nThis will create a new index called `my_index` with dimensionality 128 and the HNSW index type.\n\n## Updating an index\n\nYou can update the metadata for an index using the `/indexes/{index_name}` endpoint with a `PUT` request. For example, to update the metadata for the `my_index` index:\n\n```\nPUT /indexes/my_index\n{\n    \"metadata\": {\"description\": \"My index of image vectors\"}\n}\n\n```\n\nThis will update the metadata for the `my_index` index.\n\n## Listing indexes\n\nTo list all indexes in your Pinecone instance, you can use the `/indexes` endpoint. This will return a list of all indexes, including their name, dimensionality, index type, and metadata.\n\nTo list a specific index, you can use the `/indexes/{index_name}` endpoint with a `GET` request. This will return information about the specified index, including its name, dimensionality, index type, and metadata.\n\n## Deleting an index\n\nTo delete an index, you can use the `/indexes/{index_name}` endpoint with a `DELETE` request. For example, to delete the `my_index` index:\n\n```\nDELETE /indexes/my_index\n\n```\n\nThis will delete the `my_index` index and all associated data.\n\n## Next steps\n\nTo learn more about using indexes in Pinecone, including creating indexes with custom settings, check out the [documentation](https://docs.pinecone.io/docs/indexes). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Indexes 5f742a6c5c4b4602b2332ebdedaa1406.md"}},{"pageContent":"# Multitenancy\n\n# URL:[https://docs.pinecone.io/docs/multitenancy](https://docs.pinecone.io/docs/multitenancy)\n\n# Multitenancy\n\nIn Pinecone, multitenancy allows multiple tenants (e.g., customers, users, or applications) to share a single Pinecone instance while maintaining isolation and separation of resources.\n\n## How multitenancy works\n\nIn Pinecone, multitenancy is implemented using projects and organizations. Each tenant is assigned to a project and an organization, which allows them to access and manage their own resources within the shared Pinecone instance.\n\nEach project and organization can have its own set of permissions and access controls, which allows for fine-grained control over who can access and modify resources within each tenant.\n\n## Creating tenants\n\nTo create a new tenant in Pinecone, you can create a new project and organization for the tenant. You can then assign users or organizations to the project and set their roles and permissions.\n\n## Managing tenants\n\nOnce you have created a tenant in Pinecone, you can manage the tenant's resources and permissions using the Pinecone console or the API. You can assign permissions to users or organizations for the tenant's resources, and you can set quotas and limits for the tenant's usage of the Pinecone instance.\n\n## Next steps\n\nTo learn more about using multitenancy in Pinecone, check out the [documentation](https://docs.pinecone.io/docs/multitenancy). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Multitenancy 19f998b84eb34e0fa6cf3a880f608fbd.md"}},{"pageContent":"# Node.js client\n\nURL: [https://docs.pinecone.io/docs/node-client](https://docs.pinecone.io/docs/node-client)\n\n# Node.js client\n\nThe Pinecone Node.js client is a library that provides a Node.js interface to the Pinecone API. With the Pinecone Node.js client, you can easily perform similarity search on high-dimensional data using Node.js.\n\n## Installation\n\nYou can install the Pinecone Node.js client using npm:\n\n```\nnpm install pinecone-node-client\n\n```\n\n## Quickstart\n\nTo get started with the Pinecone Node.js client, follow these steps:\n\n1. [Sign up](https://www.pinecone.io/start/) for a Pinecone account.\n2. [Create an index](https://docs.pinecone.io/docs/quickstart#step-2-set-up-your-pinecone-instance) using the Pinecone API or the [Pinecone Console](https://www.pinecone.io/console/).\n3. Install the Pinecone Node.js client using npm.\n4. Connect to your Pinecone instance using the `init` method:\n    \n    ```\n    const pinecone = require(\"pinecone-node-client\");\n    \n    pinecone.init({ apiKey: \"<YOUR_API_KEY>\" });\n    \n    ```\n    \n    Replace `<YOUR_API_KEY>` with your Pinecone API key.\n    \n5. Add data to your index using the `upsert` method:\n    \n    ```\n    const data = [\n      { id: \"id1\", vector: [1.0, 2.0] },\n      { id: \"id2\", vector: [3.0, 4.0] },\n      { id: \"id3\", vector: [5.0, 6.0] }\n    ];\n    \n    await pinecone.upsert({\n      indexName: \"<YOUR_INDEX_NAME>\",\n      data\n    });\n    \n    ```\n    \n    Replace `<YOUR_INDEX_NAME>` with the name of the index you created in step 2.\n    \n6. Perform a similarity search using the `query` method:\n    \n    ```\n    const queryEmbedding = [0.5, 0.5];\n    const results = await pinecone.query({\n      indexName: \"<YOUR_INDEX_NAME>\",\n      queryEmbedding,\n      topK: 2\n    });\n    console.log(results);\n    \n    ```\n    \n    This will search for the data point closest to the query embedding `[0.5, 0.5]` in your index and return the top two results.\n    \n\nFor more information on using the Pinecone Node.js client, including a detailed API reference, check out the [documentation](https://docs.pinecone.io/docs/node-client).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Node js client 28eef941f4f54d9082e1033f756faa12.md"}},{"pageContent":"# Organizations\n\n# URL: [https://docs.pinecone.io/docs/organizations](https://docs.pinecone.io/docs/organizations)\n\n# Organizations\n\nIn Pinecone, an organization is a group of users and resources that share a common set of permissions and access controls. Organizations are useful for managing and organizing teams and projects within Pinecone.\n\n## Creating an organization\n\nTo create an organization in Pinecone, you must have an administrator account with the necessary permissions. Once you have an administrator account, you can create a new organization using the Pinecone console.\n\nWhen creating an organization, you must provide a name and optional description for the organization. You can also choose to invite other users to join the organization and assign them roles and permissions.\n\n## Managing users and permissions\n\nOnce you have created an organization, you can manage users and permissions using the Pinecone console. You can invite users to join the organization and assign them roles and permissions based on their responsibilities and needs.\n\nPinecone supports the following roles:\n\n- **Owner**: The owner has full administrative control over the organization and can manage users and resources.\n- **Administrator**: The administrator can manage users and resources within the organization, but cannot modify the organization's settings or delete the organization.\n- **Member**: The member can access and modify resources within the organization, but cannot manage users or resources or modify the organization's settings.\n\nYou can assign roles and permissions at the organization level, as well as at the resource level (e.g., index-level permissions).\n\n## Next steps\n\nTo learn more about using organizations in Pinecone, check out the [documentation](https://docs.pinecone.io/docs/organizations). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Organizations 2013a731ebe74e80b52f29d2f34040e0.md"}},{"pageContent":"# Overview\n\n# URL\n[https://docs.pinecone.io/docs/overview](https://docs.pinecone.io/docs/overview)\n\n# Quickstart\n\n## Introduction\n\nThis guide will walk you through the basic steps required to start using Pinecone, from setting up an account to performing your first similarity search.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following:\n\n- A Pinecone account. If you don't have one, [sign up here](https://www.pinecone.io/start/).\n- Python 3.6 or later installed on your local machine.\n\n## Step 1: Install the Pinecone SDK\n\nTo install the Pinecone SDK, run the following command:\n\n```\npip install pinecone-client\n\n```\n\n## Step 2: Set up your Pinecone instance\n\nAfter you have installed the Pinecone SDK, you can set up your Pinecone instance by running the following code:\n\n```\nimport pinecone\n\npinecone.init(api_key=\"<YOUR_API_KEY>\")\npinecone.create_index(index_name=\"<YOUR_INDEX_NAME>\", dimension=2)\n\n```\n\nReplace `<YOUR_API_KEY>` with your Pinecone API key, which you can find in the [Pinecone Console](https://www.pinecone.io/console/). Replace `<YOUR_INDEX_NAME>` with the name you want to give your index.\n\n## Step 3: Add data to your index\n\nTo add data to your index, you can use the `upsert` method:\n\n```\ndata = {\n    \"id1\": [1.0, 2.0],\n    \"id2\": [3.0, 4.0],\n    \"id3\": [5.0, 6.0],\n}\n\npinecone.upsert(index_name=\"<YOUR_INDEX_NAME>\", data=data)\n\n```\n\nIn this example, we are adding three data points to the index. Each data point is represented by a unique ID and a list of values.\n\n## Step 4: Perform a similarity search\n\nTo perform a similarity search, you can use the `query` method:\n\n```\nquery_embedding = [0.5, 0.5]\nresults = pinecone.query(index_name=\"<YOUR_INDEX_NAME>\", query_embedding=query_embedding, top_k=2)\nprint(results)\n\n```\n\nIn this example, we are performing a similarity search for the data point closest to the query embedding `[0.5, 0.5]`. The `top_k` parameter specifies that we want to return the top two results.\n\n## Next steps\n\nCongratulations, you have completed the Pinecone quickstart! To learn more about Pinecone and its features, check out the [Pinecone documentation](https://docs.pinecone.io/). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Overview bb22024ff66346e6ae814aa32b4fa3fc.md"}},{"pageContent":"# Projects\n\n# URL: [https://docs.pinecone.io/docs/projects](https://docs.pinecone.io/docs/projects)\n\n# Projects\n\nIn Pinecone, a project is a container for indexes, collections, and other resources related to a specific use case or application. Projects are useful for organizing and managing your Pinecone resources, especially if you have multiple indexes or collections.\n\n## Creating a project\n\nTo create a project in Pinecone, you can use the Pinecone console or the API. When creating a project, you must provide a name and optional description for the project.\n\n## Managing resources in a project\n\nOnce you have created a project, you can add indexes, collections, and other resources to the project. You can also assign permissions to users or organizations for the project and its resources.\n\nPinecone supports role-based access control (RBAC), which allows you to assign roles and permissions to users or organizations based on their responsibilities and needs. You can assign roles and permissions at the project level, as well as at the resource level (e.g., index-level permissions).\n\n## Listing projects\n\nTo list all projects in your Pinecone instance, you can use the Pinecone console or the API. This will return a list of all projects, including their name, description, and owner.\n\nTo list the resources in a specific project, you can use the Pinecone console or the API. This will return a list of all resources in the project, including indexes, collections, and other resources.\n\n## Next steps\n\nTo learn more about using projects in Pinecone, check out the [documentation](https://docs.pinecone.io/docs/projects). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Projects 56345f9d9ad4403e8c9a80024910f2d4.md"}},{"pageContent":"# Python client\n\n# URL: [https://docs.pinecone.io/docs/python-client](https://docs.pinecone.io/docs/python-client)\n\n# Python client\n\nThe Pinecone Python client is a library that provides a Python interface to the Pinecone API. With the Pinecone Python client, you can easily perform similarity search on high-dimensional data using Python.\n\n## Installation\n\nYou can install the Pinecone Python client using pip:\n\n```\npip install pinecone-client\n\n```\n\n## Quickstart\n\nTo get started with the Pinecone Python client, follow these steps:\n\n1. [Sign up](https://www.pinecone.io/start/) for a Pinecone account.\n2. [Create an index](https://docs.pinecone.io/docs/quickstart#step-2-set-up-your-pinecone-instance) using the Pinecone API or the [Pinecone Console](https://www.pinecone.io/console/).\n3. Install the Pinecone Python client using pip.\n4. Connect to your Pinecone instance using the `pinecone.init` method:\n    \n    ```\n    import pinecone\n    \n    pinecone.init(api_key=\"<YOUR_API_KEY>\")\n    \n    ```\n    \n    Replace `<YOUR_API_KEY>` with your Pinecone API key.\n    \n5. Add data to your index using the `pinecone.upsert` method:\n    \n    ```\n    data = {\n        \"id1\": [1.0, 2.0],\n        \"id2\": [3.0, 4.0],\n        \"id3\": [5.0, 6.0],\n    }\n    \n    pinecone.upsert(index_name=\"<YOUR_INDEX_NAME>\", data=data)\n    \n    ```\n    \n    Replace `<YOUR_INDEX_NAME>` with the name of the index you created in step 2.\n    \n6. Perform a similarity search using the `pinecone.query` method:\n    \n    ```\n    query_embedding = [0.5, 0.5]\n    results = pinecone.query(index_name=\"<YOUR_INDEX_NAME>\", query_embedding=query_embedding, top_k=2)\n    print(results)\n    \n    ```\n    \n    This will search for the data point closest to the query embedding `[0.5, 0.5]` in your index and return the top two results.\n    \n\nFor more information on using the Pinecone Python client, including a detailed API reference, check out the [documentation](https://docs.pinecone.io/docs/python-client).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Python client 6180bb4cdf3b4bbaac5ba8049b8d4080.md"}},{"pageContent":"# Quickstart\n\n# URL: [https://docs.pinecone.io/docs/quickstart](https://docs.pinecone.io/docs/quickstart)\n\n# Quickstart\n\n## Introduction\n\nThis guide will walk you through the basic steps required to start using Pinecone, from setting up an account to performing your first similarity search.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following:\n\n- A Pinecone account. If you don't have one, [sign up here](https://www.pinecone.io/start/).\n- Python 3.6 or later installed on your local machine.\n\n## Step 1: Install the Pinecone SDK\n\nTo install the Pinecone SDK, run the following command:\n\n```\npip install pinecone-client\n\n```\n\n## Step 2: Set up your Pinecone instance\n\nAfter you have installed the Pinecone SDK, you can set up your Pinecone instance by running the following code:\n\n```\nimport pinecone\n\npinecone.init(api_key=\"<YOUR_API_KEY>\")\npinecone.create_index(index_name=\"<YOUR_INDEX_NAME>\", dimension=2)\n\n```\n\nReplace `<YOUR_API_KEY>` with your Pinecone API key, which you can find in the [Pinecone Console](https://www.pinecone.io/console/). Replace `<YOUR_INDEX_NAME>` with the name you want to give your index.\n\n## Step 3: Add data to your index\n\nTo add data to your index, you can use the `upsert` method:\n\n```\ndata = {\n    \"id1\": [1.0, 2.0],\n    \"id2\": [3.0, 4.0],\n    \"id3\": [5.0, 6.0],\n}\n\npinecone.upsert(index_name=\"<YOUR_INDEX_NAME>\", data=data)\n\n```\n\nIn this example, we are adding three data points to the index. Each data point is represented by a unique ID and a list of values.\n\n## Step 4: Perform a similarity search\n\nTo perform a similarity search, you can use the `query` method:\n\n```\nquery_embedding = [0.5, 0.5]\nresults = pinecone.query(index_name=\"<YOUR_INDEX_NAME>\", query_embedding=query_embedding, top_k=2)\nprint(results)\n\n```\n\nIn this example, we are performing a similarity search for the data point closest to the query embedding `[0.5, 0.5]`. The `top_k` parameter specifies that we want to return the top two results.\n\n## Next steps\n\nCongratulations, you have completed the Pinecone quickstart! To learn more about Pinecone and its features, check out the [Pinecone documentation](https://docs.pinecone.io/). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Quickstart 7d78b5691a2e40e3ac2decce2979765c.md"}},{"pageContent":"# Sparse-dense embeddings\n\n# URL: [https://docs.pinecone.io/docs/hybrid-search](https://docs.pinecone.io/docs/hybrid-search)\n\n# Hybrid search\n\nPinecone supports hybrid search, which allows you to combine the results of multiple similarity search algorithms to improve accuracy and relevance.\n\n## How hybrid search works\n\nIn Pinecone, you can perform a hybrid search by combining the results of two or more indexes. When you perform a hybrid search, Pinecone retrieves the top results from each index and combines them to create a final set of results.\n\nTo perform a hybrid search, you must specify the names of the indexes you want to combine, as well as the number of results to retrieve from each index. For example, to perform a hybrid search with two indexes (`index1` and `index2`) and retrieve the top 10 results from each index:\n\n```\nPOST /query\n{\n    \"index_names\": [\"index1\", \"index2\"],\n    \"query_vector\": [0.5, 0.5],\n    \"top_k\": 10,\n    \"weights\": [0.5, 0.5]\n}\n\n```\n\nThis will retrieve the top 10 results from both `index1` and `index2`, and combine them using equal weights.\n\n## Weighting results\n\nWhen performing a hybrid search, you can assign weights to each index to control the contribution of each index to the final set of results. The weights must be specified as a list of floats, with one weight per index. For example, to perform a hybrid search with two indexes (`index1` and `index2`) and assign a weight of 0.8 to `index1` and a weight of 0.2 to `index2`:\n\n```\nPOST /query\n{\n    \"index_names\": [\"index1\", \"index2\"],\n    \"query_vector\": [0.5, 0.5],\n    \"top_k\": 10,\n    \"weights\": [0.8, 0.2]\n}\n\n```\n\nThis will retrieve the top 10 results from both `index1` and `index2`, and combine them using a weight of 0.8 for `index1` and a weight of 0.2 for `index2`.\n\n## Choosing indexes for hybrid search\n\nWhen choosing indexes to combine in a hybrid search, it's important to consider the characteristics of each index, such as their performance, accuracy, and relevance to your use case. You may also want to experiment with different combinations of indexes and weights to find the best combination for your specific use case.\n\n## Next steps\n\nTo learn more about using hybrid search in Pinecone, check out the [documentation](https://docs.pinecone.io/docs/hybrid-search). If you have any questions or feedback, please [contact us](https://www.pinecone.io/contact/).","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b/Sparse-dense embeddings e73e3f0ca183440c8a306ff2158cbc95.md"}},{"pageContent":"# Pinecone docs\n\n# URL : [https://docs.pinecone.io/](https://docs.pinecone.io/)\n\n# GETTING STARTED\n\n[Node.js client](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Node%20js%20client%2028eef941f4f54d9082e1033f756faa12.md)\n\n[Overview](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Overview%20bb22024ff66346e6ae814aa32b4fa3fc.md)\n\n[Quickstart](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Quickstart%207d78b5691a2e40e3ac2decce2979765c.md)\n\n[Python client](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Python%20client%206180bb4cdf3b4bbaac5ba8049b8d4080.md)\n\n[Examples](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Examples%2037128bbffa05471cb8ed6e5dada694e3.md)\n\n[Choosing index type and size](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Choosing%20index%20type%20and%20size%2044eee9971da34e1095a2e6c00340f211.md)\n\n# **CONCEPTS**\n\n[Collections](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Collections%20f6cce3ddcdaf44e7989fe72273a5ce91.md)\n\n[****Indexes****](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Indexes%205f742a6c5c4b4602b2332ebdedaa1406.md)\n\n[**Sparse-dense embeddings**](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Sparse-dense%20embeddings%20e73e3f0ca183440c8a306ff2158cbc95.md)\n\n[Organizations](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Organizations%202013a731ebe74e80b52f29d2f34040e0.md)\n\n[Projects](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Projects%2056345f9d9ad4403e8c9a80024910f2d4.md)\n\n[**Multitenancy**](Pinecone%20docs%202dab62c1a12840a1b928006d198c8d1b/Multitenancy%2019f998b84eb34e0fa6cf3a880f608fbd.md)","metadata":{"source":"/Users/rahulshukla/Desktop/Projects/langchain/gpt4-pdf-chatbot-langchain/docs/input/pinecone-docs/9e83989f-312c-4e4e-a29c-2ba4b9e359ef_Export-431ffa75-41f9-449f-91a9-435668e47490/Pinecone docs 2dab62c1a12840a1b928006d198c8d1b.md"}}]